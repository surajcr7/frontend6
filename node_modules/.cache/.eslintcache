[{"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\index.js":"1","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\App.js":"2","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\AdminRegisterForm.jsx":"3","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewSellerDeliveryPerson.jsx":"4","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\UserLoginForm.jsx":"5","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\UserRegister.jsx":"6","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllSellers.jsx":"7","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllCustomers.jsx":"8","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllDeliveryPersons.jsx":"9","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\Header.jsx":"10","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\HomePage.jsx":"11","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\ContactUs.jsx":"12","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\AboutUs.jsx":"13","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\UpdateProductForm.jsx":"14","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\SellerProducts.jsx":"15","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\AddProductForm.jsx":"16","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\Product.jsx":"17","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ViewSellerProducts.jsx":"18","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ViewAllProducts.jsx":"19","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\AddCategoryForm.jsx":"20","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\UpdateCategoryForm.jsx":"21","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\ViewAllCategories.jsx":"22","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ReviewComponent\\GetProductReviews.jsx":"23","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ReviewComponent\\AddProductReview.jsx":"24","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\AddCardDetails.jsx":"25","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewSellerOrders.jsx":"26","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewAllOrders.jsx":"27","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewDeliveryOrders.jsx":"28","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewMyOrders.jsx":"29","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CartComponent\\ViewMyCart.jsx":"30","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ProductCard.jsx":"31","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\Footers.jsx":"32","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\RoleNav.jsx":"33","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\Carousel.jsx":"34","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ProductCarousel.jsx":"35","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\CategoryNavigator.jsx":"36","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\HeaderUser.jsx":"37","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\DeliveryHeader.jsx":"38","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\AdminHeader.jsx":"39","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\SellerHeader.jsx":"40","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\NormalHeader.jsx":"41"},{"size":298,"mtime":1700618681985,"results":"42","hashOfConfig":"43"},{"size":4615,"mtime":1700618681903,"results":"44","hashOfConfig":"43"},{"size":4900,"mtime":1700618684108,"results":"45","hashOfConfig":"43"},{"size":5439,"mtime":1700618684279,"results":"46","hashOfConfig":"43"},{"size":6531,"mtime":1700618684135,"results":"47","hashOfConfig":"43"},{"size":8471,"mtime":1700618684166,"results":"48","hashOfConfig":"43"},{"size":5287,"mtime":1700618684251,"results":"49","hashOfConfig":"43"},{"size":2968,"mtime":1700618684193,"results":"50","hashOfConfig":"43"},{"size":3146,"mtime":1700618684221,"results":"51","hashOfConfig":"43"},{"size":3220,"mtime":1700657148956,"results":"52","hashOfConfig":"43"},{"size":3084,"mtime":1700660265562,"results":"53","hashOfConfig":"43"},{"size":665,"mtime":1700618682788,"results":"54","hashOfConfig":"43"},{"size":2487,"mtime":1700618682736,"results":"55","hashOfConfig":"43"},{"size":13546,"mtime":1700618682970,"results":"56","hashOfConfig":"43"},{"size":1875,"mtime":1700618682945,"results":"57","hashOfConfig":"43"},{"size":9477,"mtime":1700618682843,"results":"58","hashOfConfig":"43"},{"size":8643,"mtime":1700618683869,"results":"59","hashOfConfig":"43"},{"size":5979,"mtime":1700618684022,"results":"60","hashOfConfig":"43"},{"size":3207,"mtime":1700618683996,"results":"61","hashOfConfig":"43"},{"size":4932,"mtime":1700618682135,"results":"62","hashOfConfig":"43"},{"size":5155,"mtime":1700618682217,"results":"63","hashOfConfig":"43"},{"size":5024,"mtime":1700618683244,"results":"64","hashOfConfig":"43"},{"size":2022,"mtime":1700618683075,"results":"65","hashOfConfig":"43"},{"size":5423,"mtime":1700618683051,"results":"66","hashOfConfig":"43"},{"size":5522,"mtime":1700618682583,"results":"67","hashOfConfig":"43"},{"size":13128,"mtime":1700618683705,"results":"68","hashOfConfig":"43"},{"size":6740,"mtime":1700618683614,"results":"69","hashOfConfig":"43"},{"size":14677,"mtime":1700618683646,"results":"70","hashOfConfig":"43"},{"size":5479,"mtime":1700618683674,"results":"71","hashOfConfig":"43"},{"size":11221,"mtime":1701450684386,"results":"72","hashOfConfig":"43"},{"size":2038,"mtime":1700618682895,"results":"73","hashOfConfig":"43"},{"size":2783,"mtime":1700655962141,"results":"74","hashOfConfig":"43"},{"size":837,"mtime":1700618682526,"results":"75","hashOfConfig":"43"},{"size":2446,"mtime":1700660696494,"results":"76","hashOfConfig":"43"},{"size":2767,"mtime":1700618682919,"results":"77","hashOfConfig":"43"},{"size":804,"mtime":1700618682161,"results":"78","hashOfConfig":"43"},{"size":1456,"mtime":1700618682474,"results":"79","hashOfConfig":"43"},{"size":1439,"mtime":1700618683392,"results":"80","hashOfConfig":"43"},{"size":2967,"mtime":1700621530514,"results":"81","hashOfConfig":"43"},{"size":2325,"mtime":1700618683551,"results":"82","hashOfConfig":"43"},{"size":847,"mtime":1700618682499,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f87lnq",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\index.js",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\App.js",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\AdminRegisterForm.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewSellerDeliveryPerson.jsx",["226","227"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewSellerDeliveryPerson = () => {\n  const [allDelivery, setAllDelivery] = useState([]);\n\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n  const seller_jwtToken = sessionStorage.getItem(\"seller-jwtToken\");\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      const allUsers = await retrieveAllUser();\n      if (allUsers) {\n        setAllDelivery(allUsers.users);\n      }\n    };\n\n    getAllUsers();\n  }, []);\n\n  const retrieveAllUser = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/user/fetch/seller/delivery-person?sellerId=\" +\n        seller.id,\n      {\n        headers: {\n          Authorization: \"Bearer \" + seller_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const deleteDelivery = (userId, e) => {\n    fetch(\n      \"http://localhost:8080/api/user/delete/seller/delivery-person?deliveryId=\" +\n        userId,\n      {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + seller_jwtToken,\n        },\n      }\n    )\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"45rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>All Delivery Persons</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">First Name</th>\n                  <th scope=\"col\">Last Name</th>\n                  <th scope=\"col\">Email Id</th>\n                  <th scope=\"col\">Phone No</th>\n                  <th scope=\"col\">Address</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allDelivery.map((delivery) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{delivery.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.lastName}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.emailId}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.phoneNo}</b>\n                      </td>\n                      <td>\n                        <b>\n                          {delivery.address.street +\n                            \", \" +\n                            delivery.address.city +\n                            \", \" +\n                            delivery.address.pincode}\n                        </b>\n                      </td>\n                      <td>\n                        <button\n                          onClick={() => deleteDelivery(delivery.id)}\n                          className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewSellerDeliveryPerson;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\UserLoginForm.jsx",["228"],[],"import { useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UserLoginForm = () => {\n  let navigate = useNavigate();\n\n  const [loginRequest, setLoginRequest] = useState({\n    emailId: \"\",\n    password: \"\",\n    role: \"\",\n  });\n\n  const handleUserInput = (e) => {\n    setLoginRequest({ ...loginRequest, [e.target.name]: e.target.value });\n  };\n\n  const loginAction = (e) => {\n    fetch(\"http://localhost:8080/api/user/login\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(loginRequest),\n    })\n      .then((result) => {\n        console.log(\"result\", result);\n        result.json().then((res) => {\n          if (res.success) {\n            console.log(\"Got the success response\");\n\n            if (res.jwtToken !== null) {\n              if (res.user.role === \"Admin\") {\n                sessionStorage.setItem(\n                  \"active-admin\",\n                  JSON.stringify(res.user)\n                );\n                sessionStorage.setItem(\"admin-jwtToken\", res.jwtToken);\n              } else if (res.user.role === \"Customer\") {\n                sessionStorage.setItem(\n                  \"active-customer\",\n                  JSON.stringify(res.user)\n                );\n                sessionStorage.setItem(\"customer-jwtToken\", res.jwtToken);\n              } else if (res.user.role === \"Seller\") {\n                sessionStorage.setItem(\n                  \"active-seller\",\n                  JSON.stringify(res.user)\n                );\n                sessionStorage.setItem(\"seller-jwtToken\", res.jwtToken);\n              } else if (res.user.role === \"Delivery\") {\n                sessionStorage.setItem(\n                  \"active-delivery\",\n                  JSON.stringify(res.user)\n                );\n                sessionStorage.setItem(\"delivery-jwtToken\", res.jwtToken);\n              }\n            }\n\n            if (res.jwtToken !== null) {\n              toast.success(res.responseMessage, {\n                position: \"top-center\",\n                autoClose: 1000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              setTimeout(() => {\n                window.location.href = \"/home\";\n              }, 1000); // Redirect after 3 seconds\n            } else {\n              toast.error(res.responseMessage, {\n                position: \"top-center\",\n                autoClose: 1000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            }\n          } else {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      });\n    e.preventDefault();\n  };\n\n  return (\n    <div>\n      <div className=\"mt-2 d-flex aligns-items-center justify-content-center\">\n        <div\n          className=\"form-card border-color custom-bg\"\n          style={{ width: \"25rem\" }}\n        >\n          <div className=\"container-fluid\">\n            <div\n              className=\"card-header bg-color custom-bg-text mt-2 d-flex justify-content-center align-items-center\"\n              style={{\n                borderRadius: \"1em\",\n                height: \"38px\",\n              }}\n            >\n              <h4 className=\"card-title\">User Login</h4>\n            </div>\n            <div className=\"card-body mt-3\">\n              <form>\n                <div class=\"mb-3 text-color\">\n                  <label for=\"role\" class=\"form-label\">\n                    <b>User Role</b>\n                  </label>\n                  <select\n                    onChange={handleUserInput}\n                    className=\"form-control\"\n                    name=\"role\"\n                  >\n                    <option value=\"0\">Select Role</option>\n                    <option value=\"Admin\"> Admin </option>\n                    <option value=\"Customer\"> Customer </option>\n                    <option value=\"Seller\"> Seller </option>\n                    <option value=\"Delivery\"> Delivery Person </option>\n                  </select>\n                </div>\n\n                <div className=\"mb-3 text-color\">\n                  <label for=\"emailId\" class=\"form-label\">\n                    <b>Email Id</b>\n                  </label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"emailId\"\n                    name=\"emailId\"\n                    onChange={handleUserInput}\n                    value={loginRequest.emailId}\n                  />\n                </div>\n                <div className=\"mb-3 text-color\">\n                  <label for=\"password\" className=\"form-label\">\n                    <b>Password</b>\n                  </label>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    id=\"password\"\n                    name=\"password\"\n                    onChange={handleUserInput}\n                    value={loginRequest.password}\n                    autoComplete=\"on\"\n                  />\n                </div>\n                <div className=\"d-flex aligns-items-center justify-content-center mb-2\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn bg-color custom-bg-text\"\n                    onClick={loginAction}\n                  >\n                    Login\n                  </button>\n                </div>\n                <ToastContainer />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserLoginForm;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\UserRegister.jsx",["229","230","231","232","233"],[],"import { useState, useEffect } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UserRegister = () => {\n  const navigate = useNavigate();\n\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n\n  const [user, setUser] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    phoneNo: \"\",\n    street: \"\",\n    city: \"\",\n    pincode: \"\",\n    role: \"\",\n  });\n\n  useEffect(() => {\n    if (document.URL.indexOf(\"customer\") != -1) {\n      user.role = \"Customer\";\n    } else if (document.URL.indexOf(\"delivery\") != -1) {\n      user.role = \"Delivery\";\n    } else if (document.URL.indexOf(\"seller\") != -1) {\n      user.role = \"Seller\";\n    }\n  }, []);\n\n  const handleUserInput = (e) => {\n    setUser({ ...user, [e.target.name]: e.target.value });\n  };\n\n  const saveUser = (e) => {\n    e.preventDefault();\n\n    let jwtToken;\n\n    if (user.role === \"Delivery\") {\n      user.sellerId = seller.id;\n      // jwtToken = sessionStorage.getItem(\"seller-jwtToken\"); // Use bank's JWT token for customer register\n    }\n\n    fetch(\"http://localhost:8080/api/user/register\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n\n        //    Authorization: \"Bearer \" + jwtToken,\n      },\n      body: JSON.stringify(user),\n    })\n      .then((result) => {\n        console.log(\"result\", result);\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              navigate(\"/user/login\");\n            }, 1000);\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          } else {\n            toast.error(\"It seems server is down\", {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n    e.preventDefault();\n  };\n\n  return (\n    <div>\n      <div className=\"mt-2 d-flex aligns-items-center justify-content-center ms-2 me-2 mb-2\">\n        <div\n          className=\"form-card border-color text-color custom-bg\"\n          style={{ width: \"50rem\" }}\n        >\n          <div className=\"container-fluid\">\n            <div\n              className=\"card-header bg-color custom-bg-text mt-2 d-flex justify-content-center align-items-center\"\n              style={{\n                borderRadius: \"1em\",\n                height: \"45px\",\n              }}\n            >\n              <h5 className=\"card-title\">Register Here!!!</h5>\n            </div>\n            <div className=\"card-body mt-3\">\n              <form className=\"row g-3\" onSubmit={saveUser}>\n                <div className=\"col-md-6 mb-3 text-color\">\n                  <label htmlFor=\"title\" className=\"form-label\">\n                    <b>First Name</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    onChange={handleUserInput}\n                    value={user.firstName}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3 text-color\">\n                  <label htmlFor=\"title\" className=\"form-label\">\n                    <b>Last Name</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    onChange={handleUserInput}\n                    value={user.lastName}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3 text-color\">\n                  <b>\n                    <label className=\"form-label\">Email Id</label>\n                  </b>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"emailId\"\n                    name=\"emailId\"\n                    onChange={handleUserInput}\n                    value={user.emailId}\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label htmlFor=\"quantity\" className=\"form-label\">\n                    <b>Password</b>\n                  </label>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    id=\"password\"\n                    name=\"password\"\n                    onChange={handleUserInput}\n                    value={user.password}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label htmlFor=\"contact\" className=\"form-label\">\n                    <b>Contact No</b>\n                  </label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"phoneNo\"\n                    name=\"phoneNo\"\n                    onChange={handleUserInput}\n                    value={user.phoneNo}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label htmlFor=\"description\" className=\"form-label\">\n                    <b> Street</b>\n                  </label>\n                  <textarea\n                    className=\"form-control\"\n                    id=\"street\"\n                    name=\"street\"\n                    rows=\"3\"\n                    onChange={handleUserInput}\n                    value={user.street}\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label htmlFor=\"price\" className=\"form-label\">\n                    <b>City</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"city\"\n                    name=\"city\"\n                    onChange={handleUserInput}\n                    value={user.city}\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label htmlFor=\"pincode\" className=\"form-label\">\n                    <b>Pincode</b>\n                  </label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"pincode\"\n                    name=\"pincode\"\n                    onChange={handleUserInput}\n                    value={user.pincode}\n                  />\n                </div>\n\n                <div className=\"d-flex aligns-items-center justify-content-center\">\n                  <input\n                    type=\"submit\"\n                    className=\"btn bg-color custom-bg-text\"\n                    value=\"Register User\"\n                  />\n                </div>\n                <ToastContainer />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserRegister;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllSellers.jsx",["234","235","236"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewAllSellers = () => {\n  const [allSeller, setAllSeller] = useState([]);\n\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n  const admin_jwtToken = sessionStorage.getItem(\"admin-jwtToken\");\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      const allUsers = await retrieveAllUser();\n      if (allUsers) {\n        setAllSeller(allUsers.users);\n      }\n    };\n\n    getAllUsers();\n  }, []);\n\n  const retrieveAllUser = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/user/fetch/role-wise?role=Seller\",\n      {\n        headers: {\n          Authorization: \"Bearer \" + admin_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const deleteSeller = (userId, e) => {\n    fetch(\"http://localhost:8080/api/user/delete/seller?sellerId=\" + userId, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + admin_jwtToken,\n      },\n    })\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"45rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>All Sellers</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">First Name</th>\n                  <th scope=\"col\">Last Name</th>\n                  <th scope=\"col\">Email Id</th>\n                  <th scope=\"col\">Phone No</th>\n                  <th scope=\"col\">Address</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allSeller.map((seller) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{seller.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{seller.lastName}</b>\n                      </td>\n                      <td>\n                        <b>{seller.emailId}</b>\n                      </td>\n                      <td>\n                        <b>{seller.phoneNo}</b>\n                      </td>\n                      <td>\n                        <b>\n                          {seller.address.street +\n                            \", \" +\n                            seller.address.city +\n                            \", \" +\n                            seller.address.pincode}\n                        </b>\n                      </td>\n                      <td>\n                        <button\n                          onClick={() => deleteSeller(seller.id)}\n                          className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewAllSellers;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllCustomers.jsx",["237"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst ViewAllCustomers = () => {\n  const [allCustomer, setAllCustomer] = useState([]);\n\n  const admin_jwtToken = sessionStorage.getItem(\"admin-jwtToken\");\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      const allUsers = await retrieveAllUser();\n      if (allUsers) {\n        setAllCustomer(allUsers.users);\n      }\n    };\n\n    getAllUsers();\n  }, []);\n\n  const retrieveAllUser = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/user/fetch/role-wise?role=Customer\",\n      {\n        headers: {\n          Authorization: \"Bearer \" + admin_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"45rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>All Customers</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">First Name</th>\n                  <th scope=\"col\">Last Name</th>\n                  <th scope=\"col\">Email Id</th>\n                  <th scope=\"col\">Phone No</th>\n                  <th scope=\"col\">Address</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allCustomer.map((customer) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{customer.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{customer.lastName}</b>\n                      </td>\n                      <td>\n                        <b>{customer.emailId}</b>\n                      </td>\n                      <td>\n                        <b>{customer.phoneNo}</b>\n                      </td>\n                      <td>\n                        <b>\n                          {customer.address.street +\n                            \", \" +\n                            customer.address.city +\n                            \", \" +\n                            customer.address.pincode}\n                        </b>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewAllCustomers;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\UserComponent\\ViewAllDeliveryPersons.jsx",["238"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst ViewAllDeliveryPersons = () => {\n  const [allDelivery, setAllDelivery] = useState([]);\n  const admin_jwtToken = sessionStorage.getItem(\"admin-jwtToken\");\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      const allUsers = await retrieveAllUser();\n      if (allUsers) {\n        setAllDelivery(allUsers.users);\n      }\n    };\n\n    getAllUsers();\n  }, []);\n\n  const retrieveAllUser = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/user/fetch/role-wise?role=Delivery\",\n      {\n        headers: {\n          Authorization: \"Bearer \" + admin_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"45rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>All Delivery Persons</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">First Name</th>\n                  <th scope=\"col\">Last Name</th>\n                  <th scope=\"col\">Email Id</th>\n                  <th scope=\"col\">Phone No</th>\n                  <th scope=\"col\">Address</th>\n                  <th scope=\"col\">Seller</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allDelivery.map((delivery) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{delivery.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.lastName}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.emailId}</b>\n                      </td>\n                      <td>\n                        <b>{delivery.phoneNo}</b>\n                      </td>\n                      <td>\n                        <b>\n                          {delivery.address.street +\n                            \", \" +\n                            delivery.address.city +\n                            \", \" +\n                            delivery.address.pincode}\n                        </b>\n                      </td>\n                      <td>\n                        <b>{delivery.seller.firstName}</b>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewAllDeliveryPersons;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\Header.jsx",["239"],[],"import { Link } from \"react-router-dom\";\nimport RoleNav from \"./RoleNav\";\nimport logo from \"../images/logo1.png\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst Header = () => {\n  const [categories, setCategories] = useState([]);\n\n  const retrieveAllCategories = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/category/fetch/all?start=0&count=12\"\n    );\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getAllCategories = async () => {\n      const allCategories = await retrieveAllCategories();\n      if (allCategories) {\n        setCategories(allCategories.categories);\n      }\n    };\n\n    getAllCategories();\n  }, []);\n\n  return (\n    <div>\n      <nav class=\"navbar  navbar-expand-lg custom-bg text-color\">\n        <div class=\"container-fluid text-color\">\n          <img\n            src={logo}\n            width=\"110\"\n            height=\"90\"\n            className=\"d-inline-block align-top ml-5\"\n            alt=\"\"\n          />\n          <Link to=\"/\" class=\"navbar-brand\">\n            \n              <b className=\"text-color ms-2 f-2\">डिजिटल कृषि</b>\n           \n          </Link>\n\n          <button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span class=\"navbar-toggler-icon\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            {/* <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li class=\"nav-item dropdown\">\n                <a class=\"nav-link dropdown-toggle text-color\"\n                  role=\"button\"\n                  data-bs-toggle=\"dropdown\"\n                  aria-expanded=\"false\"\n                >\n                  <b> Category</b>\n                </a>\n                <ul class=\"dropdown-menu custom-bg text-color\">\n                  {categories.map((category) => {\n                    return (\n                      <li>\n                        <Link\n                          to={`/product/category/${category.id}/${category.name}`}\n                          class=\"dropdown-item  text-center\"\n                        >\n                          <b>{category.name}</b>\n                        </Link>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </li>\n              <li class=\"nav-item\">\n                <Link to=\"/aboutus\" class=\"nav-link active\" aria-current=\"page\">\n                  <b className=\"text-color\">About Us</b>\n                </Link>\n              </li>\n\n              <li class=\"nav-item\">\n                <Link\n                  to=\"/contactus\"\n                  class=\"nav-link active\"\n                  aria-current=\"page\"\n                >\n                  <b className=\"text-color\">Contact Us</b>\n                </Link>\n              </li>\n            </ul> */}\n\n            <RoleNav />\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Header;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\HomePage.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\ContactUs.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\AboutUs.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\UpdateProductForm.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\SellerProducts.jsx",["240"],[],"import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ProductCard from \"../ProductComponent/ProductCard\";\nimport { useLocation } from \"react-router-dom\";\n\nconst SellerProducts = () => {\n  const location = useLocation();\n  const seller = location.state;\n\n  const { categoryId, categoryName, sellerName } = useParams();\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let response;\n\n        if (categoryId == null) {\n          // Fetch all products\n          response = await axios.get(\n            `http://localhost:8080/api/product/fetch/seller-wise?sellerId=${seller.id}`\n          );\n        } else {\n          // Fetch products by category\n          response = await axios.get(\n            `http://localhost:8080/api/product/fetch/seller-wise/category-wise?sellerId=${seller.id}&categoryId=${categoryId}`\n          );\n        }\n        if (response.data) {\n          setProducts(response.data.products);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [seller, categoryId]);\n\n  return (\n    <div className=\"container-fluid mb-2\">\n      {/* <Carousel /> */}\n\n      <div\n        className=\"bg-color custom-bg-text mt-2 d-flex justify-content-center align-items-center\"\n        style={{\n          borderRadius: \"1em\",\n          height: \"38px\",\n        }}\n      >\n        <h5 class=\"card-title ms-3\">Seller Name: {sellerName}</h5>\n      </div>\n\n      <div className=\"col-md-12 mt-3\">\n        <div className=\"row row-cols-1 row-cols-md-4 g-4\">\n          {products.map((product) => {\n            return <ProductCard item={product} key={product.id} />;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SellerProducts;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\AddProductForm.jsx",["241"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst AddProductForm = () => {\n  const [categories, setCategories] = useState([]);\n\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n  const seller_jwtToken = sessionStorage.getItem(\"seller-jwtToken\");\n\n  let navigate = useNavigate();\n\n  const retrieveAllCategories = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/category/fetch/all\"\n    );\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getAllCategories = async () => {\n      const resCategory = await retrieveAllCategories();\n      if (resCategory) {\n        setCategories(resCategory.categories);\n      }\n    };\n\n    getAllCategories();\n  }, []);\n\n  const [selectedImage1, setSelectImage1] = useState(null);\n  const [selectedImage2, setSelectImage2] = useState(null);\n  const [selectedImage3, setSelectImage3] = useState(null);\n\n  const [product, setProduct] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    quantity: \"\",\n    categoryId: \"\",\n    sellerId: \"\",\n  });\n\n  const handleInput = (e) => {\n    setProduct({ ...product, [e.target.name]: e.target.value });\n  };\n\n  const saveProduct = (e) => {\n    e.preventDefault();\n    if (seller === null) {\n      toast.error(\"Seller Id is missing!!!\", {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"image1\", selectedImage1);\n    formData.append(\"image2\", selectedImage2);\n    formData.append(\"image3\", selectedImage3);\n    formData.append(\"name\", product.name);\n    formData.append(\"description\", product.description);\n    formData.append(\"price\", product.price);\n    formData.append(\"quantity\", product.quantity);\n    formData.append(\"categoryId\", product.categoryId);\n    formData.append(\"sellerId\", seller.id);\n\n    axios\n      .post(\"http://localhost:8080/api/product/add\", formData, {\n        headers: {\n          Authorization: \"Bearer \" + seller_jwtToken, // Replace with your actual JWT token\n        },\n      })\n      .then((resp) => {\n        let response = resp.data;\n\n        if (response.success) {\n          toast.success(response.responseMessage, {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n\n          setTimeout(() => {\n            navigate(\"/home\");\n          }, 2000); // Redirect after 3 seconds\n        } else if (!response.success) {\n          toast.error(response.responseMessage, {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          setTimeout(() => {\n            window.location.reload(true);\n          }, 2000); // Redirect after 3 seconds\n        } else {\n          toast.error(\"It Seems Server is down!!!\", {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          setTimeout(() => {\n            window.location.reload(true);\n          }, 2000); // Redirect after 3 seconds\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 2000); // Redirect after 3 seconds\n      });\n  };\n\n  return (\n    <div>\n      <div class=\"mt-2 d-flex aligns-items-center justify-content-center\">\n        <div\n          class=\"card form-card custom-bg shadow-lg\"\n          style={{ width: \"45rem\" }}\n        >\n          <div className=\"container-fluid\">\n            <div\n              className=\"card-header bg-color custom-bg-text mt-2 text-center\"\n              style={{\n                borderRadius: \"1em\",\n                height: \"45px\",\n              }}\n            >\n              <h5 class=\"card-title\">Add Product</h5>\n            </div>\n            <div class=\"card-body text-color\">\n              <form className=\"row g-3\">\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"title\" class=\"form-label\">\n                    <b>Product Title</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"title\"\n                    name=\"name\"\n                    onChange={handleInput}\n                    value={product.name}\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"description\" class=\"form-label\">\n                    <b>Product Description</b>\n                  </label>\n                  <textarea\n                    class=\"form-control\"\n                    id=\"description\"\n                    name=\"description\"\n                    rows=\"3\"\n                    onChange={handleInput}\n                    value={product.description}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">\n                    <b>Category</b>\n                  </label>\n\n                  <select\n                    name=\"categoryId\"\n                    onChange={handleInput}\n                    className=\"form-control\"\n                  >\n                    <option value=\"\">Select Category</option>\n\n                    {categories.map((category) => {\n                      return (\n                        <option value={category.id}> {category.name} </option>\n                      );\n                    })}\n                  </select>\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"quantity\" class=\"form-label\">\n                    <b>Product Quantity</b>\n                  </label>\n                  <input\n                    type=\"number\"\n                    class=\"form-control\"\n                    id=\"quantity\"\n                    name=\"quantity\"\n                    onChange={handleInput}\n                    value={product.quantity}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"price\" class=\"form-label\">\n                    <b>Product Price</b>\n                  </label>\n                  <input\n                    type=\"number\"\n                    class=\"form-control\"\n                    id=\"price\"\n                    name=\"price\"\n                    onChange={handleInput}\n                    value={product.price}\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"formFile\" class=\"form-label\">\n                    <b> Select 1st Image</b>\n                  </label>\n                  <input\n                    class=\"form-control\"\n                    type=\"file\"\n                    id=\"formFile\"\n                    name=\"image1\"\n                    value={product.image1}\n                    onChange={(e) => setSelectImage1(e.target.files[0])}\n                    required\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"formFile\" class=\"form-label\">\n                    <b> Select 2nd Image</b>\n                  </label>\n                  <input\n                    class=\"form-control\"\n                    type=\"file\"\n                    id=\"formFile\"\n                    name=\"image2\"\n                    value={product.image2}\n                    onChange={(e) => setSelectImage2(e.target.files[0])}\n                    required\n                  />\n                </div>\n\n                <div className=\"col-md-6 mb-3\">\n                  <label for=\"formFile\" class=\"form-label\">\n                    <b> Select 3rd Image</b>\n                  </label>\n                  <input\n                    class=\"form-control\"\n                    type=\"file\"\n                    id=\"formFile\"\n                    name=\"image3\"\n                    value={product.image3}\n                    onChange={(e) => setSelectImage3(e.target.files[0])}\n                    required\n                  />\n                </div>\n\n                <div className=\"d-flex aligns-items-center justify-content-center mb-2\">\n                  <button\n                    type=\"submit\"\n                    class=\"btn bg-color custom-bg-text\"\n                    onClick={saveProduct}\n                  >\n                    Add Product\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddProductForm;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\Product.jsx",["242"],[],"import { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProductCard from \"./ProductCard\";\nimport GetProductReviews from \"../ReviewComponent/GetProductReviews\";\nimport ProductCarousel from \"./ProductCarousel\";\n\nconst Product = () => {\n  const { productId, categoryId } = useParams();\n\n  let navigate = useNavigate();\n\n  const customer_jwtToken = sessionStorage.getItem(\"customer-jwtToken\");\n\n  let user = JSON.parse(sessionStorage.getItem(\"active-customer\"));\n\n  const [quantity, setQuantity] = useState(\"\");\n\n  const [products, setProducts] = useState([]);\n\n  const [product, setProduct] = useState({\n    seller: {\n      firstName: \"\",\n    },\n  });\n\n  const retrieveProduct = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/product/fetch?productId=\" + productId\n    );\n\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getProduct = async () => {\n      const retrievedProduct = await retrieveProduct();\n\n      setProduct(retrievedProduct.products[0]);\n    };\n\n    const getProductsByCategory = async () => {\n      const allProducts = await retrieveProductsByCategory();\n      if (allProducts) {\n        setProducts(allProducts.products);\n      }\n    };\n\n    getProduct();\n    getProductsByCategory();\n  }, [productId]);\n\n  const retrieveProductsByCategory = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/product/fetch/category-wise?categoryId=\" +\n        categoryId\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const saveProductToCart = (userId) => {\n    fetch(\"http://localhost:8080/api/cart/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + customer_jwtToken,\n      },\n      body: JSON.stringify({\n        quantity: quantity,\n        userId: userId,\n        productId: productId,\n      }),\n    }).then((result) => {\n      result.json().then((res) => {\n        if (res.success) {\n          toast.success(res.responseMessage, {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n\n          setTimeout(() => {\n            navigate(\"/customer/cart\");\n          }, 2000); // Redirect after 3 seconds\n        } else if (!res.success) {\n          toast.error(res.responseMessage, {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          setTimeout(() => {\n            window.location.reload(true);\n          }, 2000); // Redirect after 3 seconds\n        } else {\n          toast.error(\"It Seems Server is down!!!\", {\n            position: \"top-center\",\n            autoClose: 1000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          setTimeout(() => {\n            window.location.reload(true);\n          }, 2000); // Redirect after 3 seconds\n        }\n      });\n    });\n  };\n\n  const addToCart = (e) => {\n    e.preventDefault();\n    if (user == null) {\n      alert(\"Please login to buy the products!!!\");\n    } else if (product.quantity < 1) {\n      toast.error(\"Product Out Of Stock !!!\", {\n        position: \"top-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n\n      return;\n    } else {\n      saveProductToCart(user.id);\n      setQuantity(\"\");\n    }\n  };\n\n  const navigateToAddReviewPage = () => {\n    navigate(\"/product/\" + product.id + \"/review/add\", { state: product });\n  };\n\n  const sellerProductPage = () => {\n    console.log(product.seller.firstName);\n    navigate(\n      `/product/seller/${product.seller.id}/${product.seller.firstName}`,\n      {\n        state: product.seller,\n      }\n    );\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 mt-2 admin\">\n          <div class=\"card form-card custom-bg shadow-lg\">\n            <ProductCarousel\n              item={{\n                image1: product.image1,\n                image2: product.image2,\n                image3: product.image3,\n              }}\n            />\n          </div>\n        </div>\n        <div class=\"col-sm-6 mt-2\">\n          <div class=\"card form-card custom-bg shadow-lg\">\n            <div\n              className=\"card-header bg-color custom-bg-text \"\n              style={{\n                borderRadius: \"1em\",\n                height: \"50px\",\n              }}\n            >\n              <h3 class=\"card-title\">{product.name}</h3>\n            </div>\n\n            <div class=\"card-body text-left text-color\">\n              <div class=\"text-left mt-3\">\n                <h3>Description :</h3>\n              </div>\n              <h4 class=\"card-text\">{product.description}</h4>\n            </div>\n\n            <div class=\"card-body text-left text-color\">\n              <div class=\"text-left mt-3\">\n                <h3>Seller Details:</h3>\n              </div>\n\n              <div className=\"d-flex justify-content-left\">\n                <h4 class=\"card-text\">\n                  <b className=\"text-color\" onClick={sellerProductPage}>\n                    Name: {product.seller.firstName + \" \"}\n                  </b>\n                </h4>\n                <h4 class=\"card-text ms-4\">\n                  Contact: {product.seller.emailId + \" \"}\n                </h4>\n              </div>\n            </div>\n\n            <div class=\"card-footer custom-bg\">\n              <div className=\"text-center text-color\">\n                <p>\n                  <span>\n                    <h4>Price : &#8377;{product.price}</h4>\n                  </span>\n                </p>\n              </div>\n              <div className=\"d-flex justify-content-between\">\n                <div>\n                  <form class=\"row g-3\" onSubmit={addToCart}>\n                    <div class=\"col-auto\">\n                      <input\n                        type=\"number\"\n                        class=\"form-control\"\n                        id=\"addToCart\"\n                        placeholder=\"Enter Quantity...\"\n                        onChange={(e) => setQuantity(e.target.value)}\n                        value={quantity}\n                        required\n                      />\n                    </div>\n                    <div class=\"col-auto\">\n                      <input\n                        type=\"submit\"\n                        className=\"btn bg-color custom-bg-text mb-3\"\n                        value=\"Add to Cart\"\n                      />\n                      <ToastContainer />\n                    </div>\n                  </form>\n                </div>\n\n                <p class=\"ml-2 text-color\">\n                  {(() => {\n                    if (product.quantity > 0) {\n                      return <b>Stock : {product.quantity}</b>;\n                    } else {\n                      return (\n                        <b className=\"text-danger\">Stock : Out Of Stock!!!</b>\n                      );\n                    }\n                  })()}\n                </p>\n              </div>\n\n              {(() => {\n                if (user) {\n                  return (\n                    <div>\n                      <input\n                        type=\"submit\"\n                        className=\"btn bg-color custom-bg-text mb-3\"\n                        value=\"Add Review\"\n                        onClick={navigateToAddReviewPage}\n                      />\n                    </div>\n                  );\n                }\n              })()}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col-sm-3 mt-2 admin\">\n          <GetProductReviews />\n        </div>\n      </div>\n\n      <div className=\"row mt-2\">\n        <div className=\"col-md-12\">\n          <h2>Related Products:</h2>\n          <div className=\"row row-cols-1 row-cols-md-4 g-4\">\n            {products.map((product) => {\n              return <ProductCard item={product} />;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Product;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ViewSellerProducts.jsx",["243"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewSellerProducts = () => {\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n\n  const seller_jwtToken = sessionStorage.getItem(\"seller-jwtToken\");\n\n  const [allProducts, setAllProducts] = useState([]);\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    const getAllProducts = async () => {\n      const allProducts = await retrieveAllProducts();\n      if (allProducts) {\n        setAllProducts(allProducts.products);\n      }\n    };\n\n    getAllProducts();\n  }, []);\n\n  const retrieveAllProducts = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/product/fetch/seller-wise?sellerId=\" +\n        seller.id\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const deleteProduct = (productId, e) => {\n    fetch(\n      \"http://localhost:8080/api/product/delete?productId=\" +\n        productId +\n        \"&sellerId=\" +\n        seller.id,\n      {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + seller_jwtToken,\n        },\n      }\n    )\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n  };\n\n  const updateProduct = (product) => {\n    navigate(\"/seller/product/update\", { state: product });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"45rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>My Products</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">Product</th>\n                  <th scope=\"col\">Name</th>\n                  <th scope=\"col\">Description</th>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Price</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allProducts.map((product) => {\n                  return (\n                    <tr>\n                      <td>\n                        <img\n                          src={\n                            \"http://localhost:8080/api/product/\" +\n                            product.image1\n                          }\n                          class=\"img-fluid\"\n                          alt=\"product_pic\"\n                          style={{\n                            maxWidth: \"90px\",\n                          }}\n                        />\n                      </td>\n                      <td>\n                        <b>{product.name}</b>\n                      </td>\n                      <td>\n                        <b>{product.description}</b>\n                      </td>\n                      <td>\n                        <b>{product.category.name}</b>\n                      </td>\n                      <td>\n                        <b>{product.quantity}</b>\n                      </td>\n                      <td>\n                        <b>{product.price}</b>\n                      </td>\n\n                      <td>\n                        <button\n                          onClick={() => updateProduct(product)}\n                          className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                        >\n                          Update\n                        </button>\n\n                        <button\n                          onClick={() => deleteProduct(product.id)}\n                          className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewSellerProducts;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ViewAllProducts.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\AddCategoryForm.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\UpdateCategoryForm.jsx",["244"],[],"import { useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\n\nconst UpdateCategoryForm = () => {\n  const location = useLocation();\n  const category = location.state;\n  const admin_jwtToken = sessionStorage.getItem(\"admin-jwtToken\");\n\n  const [id, setId] = useState(category.id);\n  const [name, setName] = useState(category.name);\n  const [description, setDescription] = useState(category.description);\n\n  let navigate = useNavigate();\n\n  const saveCategory = (e) => {\n    let data = { id, name, description };\n\n    fetch(\"http://localhost:8080/api/category/update\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + admin_jwtToken,\n      },\n      body: JSON.stringify(data),\n    })\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              navigate(\"/admin/category/all\");\n            }, 2000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else {\n            toast.error(\"It Seems Server is down!!!\", {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n    e.preventDefault();\n  };\n\n  return (\n    <div>\n      <div class=\"mt-2 d-flex aligns-items-center justify-content-center\">\n        <div\n          class=\"form-card border-color custom-bg\"\n          style={{ width: \"25rem\" }}\n        >\n          <div className=\"container-fluid\">\n            <div\n              className=\"card-header bg-color custom-bg-text mt-2 d-flex justify-content-center align-items-center\"\n              style={{\n                borderRadius: \"1em\",\n                height: \"38px\",\n              }}\n            >\n              <h5 class=\"card-title\">Update Category</h5>\n            </div>\n            <div class=\"card-body text-color mt-3\">\n              <form>\n                <div class=\"mb-3\">\n                  <label for=\"title\" class=\"form-label\">\n                    <b>Category Title</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"title\"\n                    placeholder=\"enter title..\"\n                    onChange={(e) => {\n                      setName(e.target.value);\n                    }}\n                    value={name}\n                  />\n                </div>\n                <div class=\"mb-3\">\n                  <label for=\"description\" class=\"form-label\">\n                    <b>Category Description</b>\n                  </label>\n                  <textarea\n                    class=\"form-control\"\n                    id=\"description\"\n                    rows=\"3\"\n                    placeholder=\"enter description..\"\n                    onChange={(e) => {\n                      setDescription(e.target.value);\n                    }}\n                    value={description}\n                  />\n                </div>\n\n                <div className=\"d-flex aligns-items-center justify-content-center mb-2\">\n                  <button\n                    type=\"submit\"\n                    onClick={saveCategory}\n                    class=\"btn bg-color custom-bg-text\"\n                  >\n                    Update Category\n                  </button>\n                </div>\n\n                <ToastContainer />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateCategoryForm;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\ViewAllCategories.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ReviewComponent\\GetProductReviews.jsx",["245","246"],[],"import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport star from \"../images/star.png\";\n\nconst GetProductReviews = (hotel) => {\n  const [reviews, setReviews] = useState([]);\n  const [rating, setRating] = useState(\"0.0\");\n\n  const { productId } = useParams();\n\n  const retrieveAllReviews = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/product/review/fetch?productId=\" + productId\n    );\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getAllReviews = async () => {\n      const allReviews = await retrieveAllReviews();\n      \n      if (allReviews) {\n        setReviews(allReviews.reviews);\n        setRating(allReviews.averageRating);\n      }\n    };\n\n    getAllReviews();\n  }, []);\n\n  return (\n    <div\n      class=\"list-group form-card border-color\"\n      style={{\n        height: \"25rem\",\n      }}\n    >\n      <div class=\"list-group-item list-group-item-action bg-color custom-bg-text\">\n        <b>\n          Product Reviews [Rating: {rating} ]\n          <img\n            src={star}\n            width=\"20\"\n            height=\"20\"\n            className=\"d-inline-block align-top\"\n            alt=\"\"\n          />\n        </b>\n      </div>\n      <div\n        style={{\n          overflowY: \"auto\",\n        }}\n      >\n        {reviews.map((review) => {\n          return (\n            <div class=\"list-group-item list-group-item-action text-color custom-bg\">\n              <b className=\"text-color1\">{review.user.firstName + \" \"}</b>\n              <b className=\"text-color\">{review.star + \" /5 \"}</b>\n              <img\n                src={star}\n                width=\"20\"\n                height=\"20\"\n                className=\"d-inline-block align-top\"\n                alt=\"\"\n              />\n              <br />\n              <p>{review.review}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default GetProductReviews;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ReviewComponent\\AddProductReview.jsx",["247","248"],[],"import { useState, useEffect } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ProductCarousel from \"../ProductComponent/ProductCarousel\";\nimport { useLocation } from \"react-router-dom\";\n\nconst AddProductReview = () => {\n  let user = JSON.parse(sessionStorage.getItem(\"active-customer\"));\n\n  const customer_jwtToken = sessionStorage.getItem(\"customer-jwtToken\");\n\n  const location = useLocation();\n  const product = location.state;\n\n  const [userId, setUserId] = useState(user.id);\n\n  let { productId } = useParams();\n\n  const [star, setStar] = useState(\"\");\n  const [review, setReview] = useState(\"\");\n\n  let navigate = useNavigate();\n\n  const saveReview = (e) => {\n    if (user == null) {\n      e.preventDefault();\n      alert(\"Please login as Customer for adding your review!!!\");\n    } else {\n      e.preventDefault();\n      setUserId(user.id);\n      let data = { userId, productId, star, review };\n\n      fetch(\"http://localhost:8080/api/product/review/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + customer_jwtToken,\n        },\n        body: JSON.stringify(data),\n      }).then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              navigate(\n                \"/product/\" + product.id + \"/category/\" + product.category.id\n              );\n            }, 2000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else {\n            toast.error(\"It Seems Server is down!!!\", {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          }\n        });\n      });\n    }\n  };\n\n  return (\n    <div className=\"container-fluid mb-5\">\n      <div class=\"row\">\n        <div class=\"col-sm-2 mt-2\"></div>\n        <div class=\"col-sm-3 mt-2\">\n          <div class=\"card form-card border-color custom-bg\">\n            <ProductCarousel\n              item={{\n                image1: product.image1,\n                image2: product.image2,\n                image3: product.image3,\n              }}\n            />\n          </div>\n        </div>\n\n        <div class=\"col-sm-5 mt-2\">\n          <div\n            className=\"card form-card border-color custom-bg\"\n            style={{ width: \"30rem\" }}\n          >\n            <div className=\"card-header bg-color text-center custom-bg-text\">\n              <h5 className=\"card-title\">Add Product Review</h5>\n            </div>\n            <div className=\"card-body text-color\">\n              <form onSubmit={saveReview}>\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">\n                    <b>Star</b>\n                  </label>\n\n                  <select\n                    name=\"locationId\"\n                    onChange={(e) => {\n                      setStar(e.target.value);\n                    }}\n                    className=\"form-control\"\n                  >\n                    <option value=\"\">Select Star</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                  </select>\n                </div>\n                <div className=\"mb-3\">\n                  <label htmlFor=\"review\" className=\"form-label\">\n                    <b>Product Review</b>\n                  </label>\n                  <textarea\n                    className=\"form-control\"\n                    id=\"review\"\n                    rows=\"3\"\n                    placeholder=\"enter review..\"\n                    onChange={(e) => {\n                      setReview(e.target.value);\n                    }}\n                    value={review}\n                  />\n                </div>\n\n                <input\n                  type=\"submit\"\n                  className=\"btn bg-color custom-bg-text\"\n                  value=\"Add Review\"\n                />\n\n                <ToastContainer />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddProductReview;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\AddCardDetails.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewSellerOrders.jsx",["249"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst ViewSellerOrders = () => {\n  const seller = JSON.parse(sessionStorage.getItem(\"active-seller\"));\n  const [orders, setOrders] = useState([]);\n\n  const seller_jwtToken = sessionStorage.getItem(\"seller-jwtToken\");\n\n  const [orderId, setOrderId] = useState(\"\");\n  const [tempOrderId, setTempOrderId] = useState(\"\");\n\n  const [assignOrderId, setAssignOrderId] = useState(\"\");\n  const [deliveryPersonId, setDeliveryPersonId] = useState(\"\");\n\n  const [allDelivery, setAllDelivery] = useState([]);\n\n  const [showModal, setShowModal] = useState(false);\n\n  const handleClose = () => setShowModal(false);\n  const handleShow = () => setShowModal(true);\n\n  useEffect(() => {\n    const getAllOrders = async () => {\n      let allOrders;\n      if (orderId) {\n        allOrders = await retrieveOrdersById();\n      } else {\n        allOrders = await retrieveAllorders();\n      }\n\n      if (allOrders) {\n        setOrders(allOrders.orders);\n      }\n    };\n\n    const getAllUsers = async () => {\n      const allUsers = await retrieveAllUser();\n      if (allUsers) {\n        setAllDelivery(allUsers.users);\n      }\n    };\n\n    getAllOrders();\n    getAllUsers();\n  }, [orderId]);\n\n  const retrieveAllorders = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/seller-wise?sellerId=\" + seller.id,\n      {\n        headers: {\n          Authorization: \"Bearer \" + seller_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveAllUser = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/user/fetch/seller/delivery-person?sellerId=\" +\n        seller.id,\n      {\n        headers: {\n          Authorization: \"Bearer \" + seller_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveOrdersById = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch?orderId=\" + orderId\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const formatDateFromEpoch = (epochTime) => {\n    const date = new Date(Number(epochTime));\n    const formattedDate = date.toLocaleString(); // Adjust the format as needed\n\n    return formattedDate;\n  };\n\n  const searchOrderById = (e) => {\n    e.preventDefault();\n    setOrderId(tempOrderId);\n  };\n\n  const assignDelivery = (orderId, e) => {\n    setAssignOrderId(orderId);\n    handleShow();\n  };\n\n  const assignToDelivery = (orderId, e) => {\n    let data = { orderId: assignOrderId, deliveryId: deliveryPersonId };\n\n    fetch(\"http://localhost:8080/api/order/assign/delivery-person\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + seller_jwtToken,\n      },\n      body: JSON.stringify(data),\n    })\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setOrders(res.orders);\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else {\n            toast.error(\"It Seems Server is down!!!\", {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"40rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>Seller Orders</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <form class=\"row g-3\">\n            <div class=\"col-auto\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"inputPassword2\"\n                placeholder=\"Enter Order Id...\"\n                onChange={(e) => setTempOrderId(e.target.value)}\n                value={tempOrderId}\n              />\n            </div>\n            <div class=\"col-auto\">\n              <button\n                type=\"submit\"\n                class=\"btn bg-color custom-bg-text mb-3\"\n                onClick={searchOrderById}\n              >\n                Search\n              </button>\n            </div>\n          </form>\n\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">Order Id</th>\n                  <th scope=\"col\">Product</th>\n                  <th scope=\"col\">Product Name</th>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Seller</th>\n                  <th scope=\"col\">Price</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Customer</th>\n                  <th scope=\"col\">Order Time</th>\n                  <th scope=\"col\">Order Status</th>\n                  <th scope=\"col\">Delivery Person</th>\n                  <th scope=\"col\">Delivery Contact</th>\n                  <th scope=\"col\">Delivery Time</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {orders.map((order) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{order.orderId}</b>\n                      </td>\n                      <td>\n                        <img\n                          src={\n                            \"http://localhost:8080/api/product/\" +\n                            order.product.image1\n                          }\n                          class=\"img-fluid\"\n                          alt=\"product_pic\"\n                          style={{\n                            maxWidth: \"90px\",\n                          }}\n                        />\n                      </td>\n                      <td>\n                        <b>{order.product.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.category.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.seller.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.price}</b>\n                      </td>\n                      <td>\n                        <b>{order.quantity}</b>\n                      </td>\n                      <td>\n                        <b>{order.user.firstName}</b>\n                      </td>\n\n                      <td>\n                        <b>{formatDateFromEpoch(order.orderTime)}</b>\n                      </td>\n                      <td>\n                        <b>{order.status}</b>\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.firstName}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.phoneNo}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryDate) {\n                            return (\n                              <b>\n                                {order.deliveryDate + \" \" + order.deliveryTime}\n                              </b>\n                            );\n                          } else {\n                            return <b className=\"text-danger\">Processing</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>Delivery Assigned</b>;\n                          } else {\n                            return (\n                              <button\n                                className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                                variant=\"primary\"\n                                onClick={() => assignDelivery(order.orderId)}\n                              >\n                                Assign Delivery\n                              </button>\n                            );\n                          }\n                        })()}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <Modal show={showModal} onHide={handleClose}>\n        <Modal.Header closeButton className=\"bg-color custom-bg-text\">\n          <Modal.Title\n            style={{\n              borderRadius: \"1em\",\n            }}\n          >\n            Assign To Delivery Person\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"ms-3 mt-3 mb-3 me-3\">\n            <form>\n              <div class=\"mb-3\">\n                <label for=\"title\" class=\"form-label\">\n                  <b>Order Id</b>\n                </label>\n                <input type=\"text\" class=\"form-control\" value={assignOrderId} />\n              </div>\n\n              <div className=\" mb-3\">\n                <label className=\"form-label\">\n                  <b>Delivery Person</b>\n                </label>\n\n                <select\n                  name=\"deliveryPersonId\"\n                  onChange={(e) => setDeliveryPersonId(e.target.value)}\n                  className=\"form-control\"\n                >\n                  <option value=\"\">Select Delivery Person</option>\n\n                  {allDelivery.map((delivery) => {\n                    return (\n                      <option value={delivery.id}>\n                        {delivery.firstName + \" \" + delivery.lastName}\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n\n              <div className=\"d-flex aligns-items-center justify-content-center mb-2\">\n                <button\n                  type=\"submit\"\n                  onClick={() => assignToDelivery(assignOrderId)}\n                  class=\"btn bg-color custom-bg-text\"\n                >\n                  Assign\n                </button>\n              </div>\n\n              <ToastContainer />\n            </form>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ViewSellerOrders;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewAllOrders.jsx",["250"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst ViewAllOrders = () => {\n  const [orders, setOrders] = useState([]);\n\n  const [orderId, setOrderId] = useState(\"\");\n  const [tempOrderId, setTempOrderId] = useState(\"\");\n\n  const admin_jwtToken = sessionStorage.getItem(\"admin-jwtToken\");\n\n  useEffect(() => {\n    const getAllOrders = async () => {\n      let allOrders;\n      if (orderId) {\n        allOrders = await retrieveOrdersById();\n      } else {\n        allOrders = await retrieveAllorders();\n      }\n\n      if (allOrders) {\n        setOrders(allOrders.orders);\n      }\n    };\n\n    getAllOrders();\n  }, [orderId]);\n\n  const retrieveAllorders = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/all\",\n      {\n        headers: {\n          Authorization: \"Bearer \" + admin_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveOrdersById = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch?orderId=\" + orderId\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const formatDateFromEpoch = (epochTime) => {\n    const date = new Date(Number(epochTime));\n    const formattedDate = date.toLocaleString(); // Adjust the format as needed\n\n    return formattedDate;\n  };\n\n  const searchOrderById = (e) => {\n    e.preventDefault();\n    setOrderId(tempOrderId);\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"40rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>All Orders</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <form class=\"row g-3\">\n            <div class=\"col-auto\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"inputPassword2\"\n                placeholder=\"Enter Order Id...\"\n                onChange={(e) => setTempOrderId(e.target.value)}\n                value={tempOrderId}\n              />\n            </div>\n            <div class=\"col-auto\">\n              <button\n                type=\"submit\"\n                class=\"btn bg-color custom-bg-text mb-3\"\n                onClick={searchOrderById}\n              >\n                Search\n              </button>\n            </div>\n          </form>\n\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">Order Id</th>\n                  <th scope=\"col\">Product</th>\n                  <th scope=\"col\">Product Name</th>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Seller</th>\n                  <th scope=\"col\">Price</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Customer</th>\n                  <th scope=\"col\">Order Time</th>\n                  <th scope=\"col\">Order Status</th>\n                  <th scope=\"col\">Delivery Person</th>\n                  <th scope=\"col\">Delivery Contact</th>\n                  <th scope=\"col\">Delivery Time</th>\n                </tr>\n              </thead>\n              <tbody>\n                {orders.map((order) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{order.orderId}</b>\n                      </td>\n                      <td>\n                        <img\n                          src={\n                            \"http://localhost:8080/api/product/\" +\n                            order.product.image1\n                          }\n                          class=\"img-fluid\"\n                          alt=\"product_pic\"\n                          style={{\n                            maxWidth: \"90px\",\n                          }}\n                        />\n                      </td>\n                      <td>\n                        <b>{order.product.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.category.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.seller.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.price}</b>\n                      </td>\n                      <td>\n                        <b>{order.quantity}</b>\n                      </td>\n                      <td>\n                        <b>{order.user.firstName}</b>\n                      </td>\n\n                      <td>\n                        <b>{formatDateFromEpoch(order.orderTime)}</b>\n                      </td>\n                      <td>\n                        <b>{order.status}</b>\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.firstName}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.phoneNo}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryDate) {\n                            return (\n                              <b>\n                                {order.deliveryDate + \" \" + order.deliveryTime}\n                              </b>\n                            );\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewAllOrders;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewDeliveryOrders.jsx",["251"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst ViewDeliveryOrders = () => {\n  const deliveryPerson = JSON.parse(sessionStorage.getItem(\"active-delivery\"));\n  const [orders, setOrders] = useState([]);\n\n  const delivery_jwtToken = sessionStorage.getItem(\"delivery-jwtToken\");\n\n  const [deliveryUpdateRequest, setDeliveryUpdateRequest] = useState({\n    orderId: \"\",\n    deliveryStatus: \"\",\n    deliveryTime: \"\",\n    deliveryDate: \"\",\n    deliveryId: deliveryPerson.id,\n  });\n\n  const [deliveryStatus, setDeliveryStatus] = useState([]);\n  const [deliveryTime, setDeliveryTime] = useState([]);\n\n  const handleInput = (e) => {\n    setDeliveryUpdateRequest({\n      ...deliveryUpdateRequest,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const [orderId, setOrderId] = useState(\"\");\n  const [tempOrderId, setTempOrderId] = useState(\"\");\n  const [assignOrderId, setAssignOrderId] = useState(\"\");\n\n  const [showModal, setShowModal] = useState(false);\n\n  const handleClose = () => setShowModal(false);\n  const handleShow = () => setShowModal(true);\n\n  useEffect(() => {\n    const getAllOrders = async () => {\n      let allOrders;\n      if (orderId) {\n        allOrders = await retrieveOrdersById();\n      } else {\n        allOrders = await retrieveAllorders();\n      }\n\n      if (allOrders) {\n        setOrders(allOrders.orders);\n      }\n    };\n\n    const getAllDeliveryStatus = async () => {\n      let allStatus = await retrieveAllDeliveryStatus();\n\n      if (allStatus) {\n        setDeliveryStatus(allStatus);\n      }\n    };\n\n    const getAllDeliveryTiming = async () => {\n      let allTiming = await retrieveAllDeliveryTiming();\n\n      if (allTiming) {\n        setDeliveryTime(allTiming);\n      }\n    };\n\n    getAllOrders();\n    getAllDeliveryStatus();\n    getAllDeliveryTiming();\n  }, [orderId]);\n\n  const retrieveAllorders = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/delivery-wise?deliveryPersonId=\" +\n        deliveryPerson.id,\n      {\n        headers: {\n          Authorization: \"Bearer \" + delivery_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveAllDeliveryStatus = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/delivery-status/all\"\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveAllDeliveryTiming = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/delivery-time/all\"\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const retrieveOrdersById = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch?orderId=\" + orderId\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const formatDateFromEpoch = (epochTime) => {\n    const date = new Date(Number(epochTime));\n    const formattedDate = date.toLocaleString(); // Adjust the format as needed\n\n    return formattedDate;\n  };\n\n  const searchOrderById = (e) => {\n    e.preventDefault();\n    setOrderId(tempOrderId);\n  };\n\n  const updateDelivery = (orderId, e) => {\n    setAssignOrderId(orderId);\n    handleShow();\n  };\n\n  const updateOrderStatus = (orderId, e) => {\n    deliveryUpdateRequest.orderId = assignOrderId;\n\n    fetch(\"http://localhost:8080/api/order/update/delivery-status\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + delivery_jwtToken,\n      },\n      body: JSON.stringify(deliveryUpdateRequest),\n    })\n      .then((result) => {\n        result.json().then((res) => {\n          if (res.success) {\n            toast.success(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else if (!res.success) {\n            toast.error(res.responseMessage, {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          } else {\n            toast.error(\"It Seems Server is down!!!\", {\n              position: \"top-center\",\n              autoClose: 1000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 2000); // Redirect after 3 seconds\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        toast.error(\"It seems server is down\", {\n          position: \"top-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setTimeout(() => {\n          window.location.reload(true);\n        }, 1000); // Redirect after 3 seconds\n      });\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"40rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>My Delivery Orders</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <form class=\"row g-3\">\n            <div class=\"col-auto\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"inputPassword2\"\n                placeholder=\"Enter Order Id...\"\n                onChange={(e) => setTempOrderId(e.target.value)}\n                value={tempOrderId}\n              />\n            </div>\n            <div class=\"col-auto\">\n              <button\n                type=\"submit\"\n                class=\"btn bg-color custom-bg-text mb-3\"\n                onClick={searchOrderById}\n              >\n                Search\n              </button>\n            </div>\n          </form>\n\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">Order Id</th>\n                  <th scope=\"col\">Product</th>\n                  <th scope=\"col\">Product Name</th>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Seller</th>\n                  <th scope=\"col\">Price</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Customer</th>\n                  <th scope=\"col\">Order Time</th>\n                  <th scope=\"col\">Order Status</th>\n                  <th scope=\"col\">Delivery Person</th>\n                  <th scope=\"col\">Delivery Contact</th>\n                  <th scope=\"col\">Delivery Time</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {orders.map((order) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{order.orderId}</b>\n                      </td>\n                      <td>\n                        <img\n                          src={\n                            \"http://localhost:8080/api/product/\" +\n                            order.product.image1\n                          }\n                          class=\"img-fluid\"\n                          alt=\"product_pic\"\n                          style={{\n                            maxWidth: \"90px\",\n                          }}\n                        />\n                      </td>\n                      <td>\n                        <b>{order.product.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.category.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.seller.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.price}</b>\n                      </td>\n                      <td>\n                        <b>{order.quantity}</b>\n                      </td>\n                      <td>\n                        <b>{order.user.firstName}</b>\n                      </td>\n\n                      <td>\n                        <b>{formatDateFromEpoch(order.orderTime)}</b>\n                      </td>\n                      <td>\n                        <b>{order.status}</b>\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.firstName}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.phoneNo}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryDate) {\n                            return (\n                              <b>\n                                {order.deliveryDate + \" \" + order.deliveryTime}\n                              </b>\n                            );\n                          } else {\n                            return <b className=\"text-danger\">Processing</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.status === \"Delivered\") {\n                            return <b className=\"text-success\">Delivered</b>;\n                          } else {\n                            return (\n                              <button\n                                className=\"btn btn-sm bg-color custom-bg-text ms-2\"\n                                variant=\"primary\"\n                                onClick={() => updateDelivery(order.orderId)}\n                              >\n                                Update Status\n                              </button>\n                            );\n                          }\n                        })()}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <Modal show={showModal} onHide={handleClose}>\n        <Modal.Header closeButton className=\"bg-color custom-bg-text\">\n          <Modal.Title\n            style={{\n              borderRadius: \"1em\",\n            }}\n          >\n            Update Delivery Status\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"ms-3 mt-3 mb-3 me-3\">\n            <form>\n              <div class=\"mb-3\">\n                <label for=\"title\" class=\"form-label\">\n                  <b>Order Id</b>\n                </label>\n                <input type=\"text\" class=\"form-control\" value={assignOrderId} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label for=\"deliveryDate\" class=\"form-label\">\n                  <b>Delivery Date</b>\n                </label>\n                <input\n                  type=\"date\"\n                  class=\"form-control\"\n                  id=\"deliveryDate\"\n                  name=\"deliveryDate\"\n                  onChange={handleInput}\n                  value={deliveryUpdateRequest.deliveryDate}\n                />\n              </div>\n\n              <div className=\" mb-3\">\n                <label className=\"form-label\">\n                  <b>Delivery Time</b>\n                </label>\n\n                <select\n                  name=\"deliveryTime\"\n                  onChange={handleInput}\n                  className=\"form-control\"\n                >\n                  <option value=\"\">Select Delivery Time</option>\n\n                  {deliveryTime.map((time) => {\n                    return <option value={time}>{time}</option>;\n                  })}\n                </select>\n              </div>\n\n              <div className=\" mb-3\">\n                <label className=\"form-label\">\n                  <b>Delivery Status</b>\n                </label>\n\n                <select\n                  name=\"deliveryStatus\"\n                  onChange={handleInput}\n                  className=\"form-control\"\n                >\n                  <option value=\"\">Select Delivery Status</option>\n\n                  {deliveryStatus.map((status) => {\n                    return <option value={status}>{status}</option>;\n                  })}\n                </select>\n              </div>\n\n              <div className=\"d-flex aligns-items-center justify-content-center mb-2\">\n                <button\n                  type=\"submit\"\n                  onClick={() => updateOrderStatus(assignOrderId)}\n                  class=\"btn bg-color custom-bg-text\"\n                >\n                  Update Status\n                </button>\n                <ToastContainer />\n              </div>\n            </form>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ViewDeliveryOrders;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\OrderComponent\\ViewMyOrders.jsx",["252"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nconst ViewMyOrders = () => {\n  let user = JSON.parse(sessionStorage.getItem(\"active-customer\"));\n\n  const [orders, setOrders] = useState([]);\n\n  const customer_jwtToken = sessionStorage.getItem(\"customer-jwtToken\");\n\n  useEffect(() => {\n    const getAllOrders = async () => {\n      const allOrders = await retrieveCart();\n      if (allOrders) {\n        setOrders(allOrders.orders);\n      }\n    };\n\n    getAllOrders();\n  }, []);\n\n  const retrieveCart = async () => {\n    const response = await axios.get(\n      \"http://localhost:8080/api/order/fetch/user-wise?userId=\" + user.id,\n      {\n        headers: {\n          Authorization: \"Bearer \" + customer_jwtToken, // Replace with your actual JWT token\n        },\n      }\n    );\n    console.log(response.data);\n    return response.data;\n  };\n\n  const formatDateFromEpoch = (epochTime) => {\n    const date = new Date(Number(epochTime));\n    const formattedDate = date.toLocaleString(); // Adjust the format as needed\n\n    return formattedDate;\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <div\n        className=\"card form-card ms-2 me-2 mb-5 custom-bg shadow-lg\"\n        style={{\n          height: \"40rem\",\n        }}\n      >\n        <div\n          className=\"card-header custom-bg-text text-center bg-color\"\n          style={{\n            borderRadius: \"1em\",\n            height: \"50px\",\n          }}\n        >\n          <h2>My Orders</h2>\n        </div>\n        <div\n          className=\"card-body\"\n          style={{\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover text-color text-center\">\n              <thead className=\"table-bordered border-color bg-color custom-bg-text\">\n                <tr>\n                  <th scope=\"col\">Order Id</th>\n                  <th scope=\"col\">Product</th>\n                  <th scope=\"col\">Product Name</th>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Seller</th>\n                  <th scope=\"col\">Price</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Order Time</th>\n                  <th scope=\"col\">Order Status</th>\n                  <th scope=\"col\">Delivery Person</th>\n                  <th scope=\"col\">Delivery Contact</th>\n                  <th scope=\"col\">Delivery Time</th>\n                </tr>\n              </thead>\n              <tbody>\n                {orders.map((order) => {\n                  return (\n                    <tr>\n                      <td>\n                        <b>{order.orderId}</b>\n                      </td>\n                      <td>\n                        <img\n                          src={\n                            \"http://localhost:8080/api/product/\" +\n                            order.product.image1\n                          }\n                          class=\"img-fluid\"\n                          alt=\"product_pic\"\n                          style={{\n                            maxWidth: \"90px\",\n                          }}\n                        />\n                      </td>\n                      <td>\n                        <b>{order.product.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.category.name}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.seller.firstName}</b>\n                      </td>\n                      <td>\n                        <b>{order.product.price}</b>\n                      </td>\n                      <td>\n                        <b>{order.quantity}</b>\n                      </td>\n                      <td>\n                        <b>{formatDateFromEpoch(order.orderTime)}</b>\n                      </td>\n                      <td>\n                        <b>{order.status}</b>\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.firstName}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryPerson) {\n                            return <b>{order.deliveryPerson.phoneNo}</b>;\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                      <td>\n                        {(() => {\n                          if (order.deliveryDate) {\n                            return (\n                              <b>\n                                {order.deliveryDate + \" \" + order.deliveryTime}\n                              </b>\n                            );\n                          } else {\n                            return <b className=\"text-danger\">Pending</b>;\n                          }\n                        })()}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewMyOrders;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CartComponent\\ViewMyCart.jsx",["253","254","255"],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ProductCard.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\Footers.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\RoleNav.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\PageComponent\\Carousel.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\ProductComponent\\ProductCarousel.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\CategoryComponent\\CategoryNavigator.jsx",["256"],[],"import { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst CategoryNavigator = (category) => {\n  const { sellerId, sellerName } = useParams();\n\n  const navigate = useNavigate();\n\n  const categoryNavigator = () => {\n    if (sellerId  && sellerId !== 0) {\n      navigate(\n        `/product/seller/${sellerId}/${sellerName}/category/${category.item.id}/${category.item.name}`,\n        {\n          state: { id: sellerId, firstName: sellerName },\n        }\n      );\n    } else {\n      navigate(`/product/category/${category.item.id}/${category.item.name}`);\n    }\n  };\n\n  return (\n    <b className=\"text-color\" onClick={categoryNavigator}>\n      <i>{category.item.name}</i>\n    </b>\n  );\n};\n\nexport default CategoryNavigator;\n","C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\HeaderUser.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\DeliveryHeader.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\AdminHeader.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\SellerHeader.jsx",[],[],"C:\\Users\\97798\\Desktop\\ecommerce-multivendor-frontend-master\\src\\NavbarComponent\\NormalHeader.jsx",[],[],{"ruleId":"257","severity":1,"message":"258","line":13,"column":7,"nodeType":"259","messageId":"260","endLine":13,"endColumn":15},{"ruleId":"261","severity":1,"message":"262","line":24,"column":6,"nodeType":"263","endLine":24,"endColumn":8,"suggestions":"264"},{"ruleId":"257","severity":1,"message":"258","line":7,"column":7,"nodeType":"259","messageId":"260","endLine":7,"endColumn":15},{"ruleId":"265","severity":1,"message":"266","line":24,"column":42,"nodeType":"267","messageId":"268","endLine":24,"endColumn":44},{"ruleId":"265","severity":1,"message":"266","line":26,"column":49,"nodeType":"267","messageId":"268","endLine":26,"endColumn":51},{"ruleId":"265","severity":1,"message":"266","line":28,"column":47,"nodeType":"267","messageId":"268","endLine":28,"endColumn":49},{"ruleId":"261","severity":1,"message":"269","line":31,"column":6,"nodeType":"263","endLine":31,"endColumn":8,"suggestions":"270"},{"ruleId":"257","severity":1,"message":"271","line":40,"column":9,"nodeType":"259","messageId":"260","endLine":40,"endColumn":17},{"ruleId":"257","severity":1,"message":"272","line":10,"column":9,"nodeType":"259","messageId":"260","endLine":10,"endColumn":15},{"ruleId":"257","severity":1,"message":"258","line":13,"column":7,"nodeType":"259","messageId":"260","endLine":13,"endColumn":15},{"ruleId":"261","severity":1,"message":"262","line":24,"column":6,"nodeType":"263","endLine":24,"endColumn":8,"suggestions":"273"},{"ruleId":"261","severity":1,"message":"262","line":19,"column":6,"nodeType":"263","endLine":19,"endColumn":8,"suggestions":"274"},{"ruleId":"261","severity":1,"message":"262","line":18,"column":6,"nodeType":"263","endLine":18,"endColumn":8,"suggestions":"275"},{"ruleId":"257","severity":1,"message":"276","line":8,"column":10,"nodeType":"259","messageId":"260","endLine":8,"endColumn":20},{"ruleId":"257","severity":1,"message":"277","line":11,"column":23,"nodeType":"259","messageId":"260","endLine":11,"endColumn":35},{"ruleId":"257","severity":1,"message":"278","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":24},{"ruleId":"261","severity":1,"message":"279","line":53,"column":6,"nodeType":"263","endLine":53,"endColumn":17,"suggestions":"280"},{"ruleId":"261","severity":1,"message":"281","line":25,"column":6,"nodeType":"263","endLine":25,"endColumn":8,"suggestions":"282"},{"ruleId":"257","severity":1,"message":"283","line":11,"column":14,"nodeType":"259","messageId":"260","endLine":11,"endColumn":19},{"ruleId":"257","severity":1,"message":"284","line":2,"column":10,"nodeType":"259","messageId":"260","endLine":2,"endColumn":14},{"ruleId":"261","severity":1,"message":"285","line":31,"column":6,"nodeType":"263","endLine":31,"endColumn":8,"suggestions":"286"},{"ruleId":"257","severity":1,"message":"287","line":1,"column":20,"nodeType":"259","messageId":"260","endLine":1,"endColumn":29},{"ruleId":"257","severity":1,"message":"288","line":5,"column":8,"nodeType":"259","messageId":"260","endLine":5,"endColumn":13},{"ruleId":"261","severity":1,"message":"289","line":49,"column":6,"nodeType":"263","endLine":49,"endColumn":15,"suggestions":"290"},{"ruleId":"261","severity":1,"message":"291","line":28,"column":6,"nodeType":"263","endLine":28,"endColumn":15,"suggestions":"292"},{"ruleId":"261","severity":1,"message":"291","line":73,"column":6,"nodeType":"263","endLine":73,"endColumn":15,"suggestions":"293"},{"ruleId":"261","severity":1,"message":"294","line":20,"column":6,"nodeType":"263","endLine":20,"endColumn":8,"suggestions":"295"},{"ruleId":"257","severity":1,"message":"296","line":15,"column":10,"nodeType":"259","messageId":"260","endLine":15,"endColumn":21},{"ruleId":"257","severity":1,"message":"297","line":15,"column":23,"nodeType":"259","messageId":"260","endLine":15,"endColumn":37},{"ruleId":"261","severity":1,"message":"294","line":32,"column":6,"nodeType":"263","endLine":32,"endColumn":8,"suggestions":"298"},{"ruleId":"257","severity":1,"message":"284","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":14},"no-unused-vars","'navigate' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveAllUser'. Either include it or remove the dependency array.","ArrayExpression",["299"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["300"],"'jwtToken' is defined but never used.","'seller' is assigned a value but never used.",["301"],["302"],["303"],"'categories' is assigned a value but never used.","'categoryName' is assigned a value but never used.","'ToastContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'retrieveProduct' and 'retrieveProductsByCategory'. Either include them or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'retrieveAllProducts'. Either include it or remove the dependency array.",["305"],"'setId' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'retrieveAllReviews'. Either include it or remove the dependency array.",["306"],"'useEffect' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'retrieveAllUser', 'retrieveAllorders', and 'retrieveOrdersById'. Either include them or remove the dependency array.",["307"],"React Hook useEffect has missing dependencies: 'retrieveAllorders' and 'retrieveOrdersById'. Either include them or remove the dependency array.",["308"],["309"],"React Hook useEffect has a missing dependency: 'retrieveCart'. Either include it or remove the dependency array.",["310"],"'productCart' is assigned a value but never used.","'setProductCart' is assigned a value but never used.",["311"],{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"312","fix":"316"},{"desc":"312","fix":"317"},{"desc":"312","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"327","fix":"329"},{"desc":"330","fix":"331"},{"desc":"330","fix":"332"},"Update the dependencies array to be: [retrieveAllUser]",{"range":"333","text":"334"},"Update the dependencies array to be: [user]",{"range":"335","text":"336"},{"range":"337","text":"334"},{"range":"338","text":"334"},{"range":"339","text":"334"},"Update the dependencies array to be: [productId, retrieveProduct, retrieveProductsByCategory]",{"range":"340","text":"341"},"Update the dependencies array to be: [retrieveAllProducts]",{"range":"342","text":"343"},"Update the dependencies array to be: [retrieveAllReviews]",{"range":"344","text":"345"},"Update the dependencies array to be: [orderId, retrieveAllUser, retrieveAllorders, retrieveOrdersById]",{"range":"346","text":"347"},"Update the dependencies array to be: [orderId, retrieveAllorders, retrieveOrdersById]",{"range":"348","text":"349"},{"range":"350","text":"349"},"Update the dependencies array to be: [retrieveCart]",{"range":"351","text":"352"},{"range":"353","text":"352"},[665,667],"[retrieveAllUser]",[808,810],"[user]",[647,649],[464,466],[469,471],[1428,1439],"[productId, retrieveProduct, retrieveProductsByCategory]",[682,684],"[retrieveAllProducts]",[839,841],"[retrieveAllReviews]",[1357,1366],"[orderId, retrieveAllUser, retrieveAllorders, retrieveOrdersById]",[665,674],"[orderId, retrieveAllorders, retrieveOrdersById]",[1950,1959],[522,524],"[retrieveCart]",[838,840]]